---
description: 개발자가 백엔드 작업을 할때, 다음 과정을 따라서 Agent 가 동작합니다.
globs: 
alwaysApply: false
---
# 백엔드 개발 규칙

이 문서는 본 프로젝트의 백엔드 개발 시 지켜야 할 규칙과 가이드라인을 정의합니다.

## 목차

1.  [코딩 스타일](#코딩-스타일)
2.  [아키텍처](#아키텍처)
3.  [API 설계](#api-설계)
4.  [데이터베이스](#데이터베이스)
5.  [인증 및 인가](#인증-및-인가)
6.  [에러 핸들링](#에러-핸들링)
7.  [테스팅](#테스팅)
8.  [배포](#배포)
9.  [보안](#보안)
10. [의존성 관리](#의존성-관리)
11. [기타](#기타)

## 1. 코딩 스타일

-   [ESLint](https://eslint.org/)와 [Prettier](https://prettier.io/) 설정을 따릅니다. (`packages/eslint-config` 참고)
-   변수명, 함수명, 클래스명 등은 일관된 네이밍 컨벤션을 사용합니다.

## 2. 아키텍처

-   프로젝트 아키텍처 개요 (예: 레이어드 아키텍처, 헥사고날 아키텍처 등)
-   모듈 및 서비스 설계 원칙

## 3. API 설계

-   RESTful API 설계 가이드라인
-   API 버전 관리 전략
-   요청/응답 형식 표준 (`packages/interface` 참고)

## 4. 데이터베이스

-   데이터베이스 스키마 설계 규칙
-   ORM/ODM 사용 가이드라인
-   트랜잭션 관리 정책

## 5. 인증 및 인가

-   인증 방식 (예: JWT, OAuth2)
-   인가 처리 및 접근 제어 규칙

## 6. 에러 핸들링

-   표준 에러 코드 및 응답 형식
-   로깅 정책

## 7. 테스팅

-   단위 테스트, 통합 테스트, E2E 테스트 작성 가이드
-   테스트 커버리지 목표

## 8. 배포

-   개발, 스테이징, 프로덕션 환경별 배포 절차
-   CI/CD 파이프라인 설정

## 9. 보안

-   일반적인 웹 취약점 방어 (SQL Injection, XSS 등)
-   민감 정보 관리 방안

## 10. 의존성 관리

-   라이브러리 추가/업데이트 절차
-   불필요한 의존성 최소화

## 11. 기타

-   (기타 백엔드 개발 관련 규칙 및 가이드라인) 