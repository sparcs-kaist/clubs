---
description: 개발자가 프론트엔드 작업을 할때, 다음 과정을 따라서 Agent 가 동작합니다.
globs: 
alwaysApply: false
---
# 프론트엔드 개발 규칙

이 문서는 본 프로젝트의 프론트엔드 개발 시 지켜야 할 규칙과 가이드라인을 정의합니다.

## 목차

1.  [코딩 스타일](mdc:#코딩-스타일)
2.  [디렉토리 구조](mdc:#디렉토리-구조)
3.  [컴포넌트](mdc:#컴포넌트)
4.  [상태 관리](mdc:#상태-관리)
5.  [API 연동](mdc:#api-연동)
6.  [테스팅](mdc:#테스팅)
7.  [성능 최적화](mdc:#성능-최적화)
8.  [의존성 관리](mdc:#의존성-관리)
9.  [기타](mdc:#기타)

## 1. 코딩 스타일

-   [ESLint](mdc:https:/eslint.org)와 [Prettier](mdc:https:/prettier.io) 설정을 따릅니다. (`packages/eslint-config` 참고)
-   변수명, 함수명 등은 일관된 네이밍 컨벤션을 사용합니다. (예: `camelCase` 또는 `PascalCase`)

## 2. 디렉토리 구조

-   (여기에 프로젝트의 프론트엔드 디렉토리 구조 규칙을 명시합니다.)

## 3. 컴포넌트

-   컴포넌트 작성 규칙 (예: 함수형 컴포넌트, props 전달 방식 등)
-   재사용 가능한 컴포넌트 설계 원칙

## 4. 상태 관리

-   프로젝트에서 사용하는 상태 관리 라이브러리 (예: Redux, Zustand, Recoil 등)
-   상태 관리 패턴 및 규칙

## 5. API 연동

-   API 요청/응답 처리 방식
-   에러 핸들링 정책

## 6. 테스팅

-   단위 테스트, 통합 테스트, E2E 테스트 작성 가이드
-   테스트 커버리지 목표

## 7. 성능 최적화

-   코드 스플리팅, 레이지 로딩 등 최적화 기법
-   이미지 최적화 가이드

## 8. 의존성 관리

-   라이브러리 추가/업데이트 절차
-   불필요한 의존성 최소화

## 9. 기타

-   (기타 프론트엔드 개발 관련 규칙 및 가이드라인) 
